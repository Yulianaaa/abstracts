# Git


# Команды
## Документация по командам
git help
	<command_name>	# описание конкретной команды

# Задать конфигурацию Git
git config
	--global user.name "Igor Polyakov"
	--global user.email igor_polyakov@phystech.edu
	--global color.ui true
	# раскрасить сообщения Git в терминале

## Создать контроль версий (создать хранилище ./.git/ в выбранной папке)
git init

## Удалённые репозитории
git remote
	add <name> <address>								# создать удалённый репозиторий
	add origin https://github.com/noggatur/new_repo.git	# на GitHub
	-v													# показать удалённый репозиторий
	rm <name>											# удалить удалённый репозиторий

## Посмотреть изменения в системе
git status

## Принять изменения (отслеживать изменения в файлах)
git add
	<file>	# в файле
	.		# в текущей папке
	--all	# все файлы
	"*.txt"	# во всех файлах проекта с расширением txt
	*.txt	# во всех файлах текущей папки с расширением txt

## Удалить файл и принять это изменение
git rm <file>	# работают те же обозначения, что и для add
	--cached <file>	# удалить только из отслеживания изменений

## Переместить файл и принять это изменение
git mv <путь_1/к/файлу> <путь_2/к/файлу>

## Закоммитить изменения (сохранить версию) и описать их
git commit -m "Commit message"
	--amend -m "Commit message"			# изменить коммит (если есть изменения) с указанным сообщением
	--amend -m "Amended commit message"	# изменить сообщение коммита (если нет изменений — проверить соблюдение условия !)
	-a									# добавить изменения в отслеживаемых файлах
### Коммиты желательно писать в настоящем времени
### Придерживаться одних и тех же тегов (кодированию изменений)
### Изменения следует описывать максимально конкретно
### Коммиты могут содержать довольно большое описание. В этом случае важно написать краткое пояснение, а затем более развёрнутое через 1 строчку

## HEAD — указатель на текущий коммит текущей ветки

## Передвинуть указатель назад
git reset
	<file>				# выкинуть файл из истории
	HEAD <file>			# отменить принятое изменение
	--soft <commit_id || HEAD^>	# не меняет ни изменения, ни рабочую папку
	--mixed <commit_id || HEAD^>	# меняет только изменения, но не рабочую папку
	--hard <commit_id || HEAD^>	# меняет всё
## перед использованием этой команды правильно будет скопировать данные о последних 3х коммитах

## Удалить неотслеживаемые изменения
git clean
	-n	# проверить, что будет удаляться
	-f	# удалить

## Посмотреть историю коммитов
git log
	-n <num>			# num коммитов
	--since=2016-09-23	# все коммиты, начиная с указанной даты
	--until=2016-09-23	# все коммиты, до указанной даты
	--author="Igor"		# все коммиты указанного автора
	--grep="smth"		# поиск по коммитам через регулярное выражение
	HEAD				# последний коммит

## Посмотреть изменения
git diff	# все
	<file>						# в конкретном файле
	$1 $2 --stat -- . | wc -l	# количество изменений
	--staged					# изменения в добавленных (перед коммитом) файлах
	--color-words				# показывает изменения прямо в строчке

## Перейти к определённой версии
git checkout
	<file || commit_id || branch>					# перейти к версию файла, коммита или ветки
	-- <file>										# перейти к последней версии файла, оставаясь на той же ветке
	<commit_id || part_of_the_commit_id> -- <file>	# вернуться к определённой версии файла. после этого необходимо сделать следующее:
		git reset HEAD <file>
		git checkout -- <file>

## Вернуться к коммиту
git revert <commit_id || part_of_the_commit_id>

## Запилить последнюю версию проекта на GitHub
git push
	<name> <branch>
	-u origin master	# после этого можно просто git push
### GitHub не заботится о контроле доступа к репозиторию.
### Есть альтернативные варианты репозиториев: BitBicket, Gitosis, Gitorious.
### В последних 2 реализован контроль доступа.

## Скрыть изменения с последнего коммита
git stash
## И обратно
git stash pop


# Ветки
git branch	# посмотреть имеющиеся ветки
	<branch_name>		# создать ветку
	-d <branch_name>	# удалить ветку

# Слить текущую ветку с другой веткой
git merge <branch_name>


# Игнорирование файлов
## Информация об игнорируемых файлах содержится в файле проекта .gitignore
## В нём перечисляются все файлы и папки
## Кроме того, можно задавать регулярные выражения с помощью символов
*, ?, [aeiou], [0-9]
## !этот_файл_не_игнорируется.html
## Строчные комментарии начинаются с символа #
## В проекте следует игнорировать
##   - скомпилированный код
##   - архивы
##   - логи и базы данных
##   - файлы, сгенерированные операционной системой
##   - файлы, загруженные пользователем
## Гобальное игнорирование:
git config --global core.excludesfile ~/.gitignore_global
### По умолчанию, Git игнорирует пустые папки (следит только за файлами). Если же нужно создать пустую папку, то в неё также нужно добавить файл .gitkeep

# Дополнительные фишки
## Настройка автозаполнения в Git
curl -OL http://github.com/git/git/raw/master/contrib/completion/git-completion.bash
mv ~/git-completion.bash ~/.git-completion.bash
### Прописать в .bash_profile
if [ -f ~/.git-completion.bash ]; then
	sourse ~/.git-completion.bash
fi


# Мои команды
## Время создания коммита
git show -s --date=iso-strict-local --pretty=format:'%ad' <commit_id>


# Источники
# [V] https://try.github.io (введение в Git)
# [ ] https://www.codeschool.com/learn/git (практический курс)
# [ ] https://www.lynda.com/Git-tutorials/Git-Essential-Training/100222-2.html (теоретический курс)
# [ ] https://git-scm.com/book/en/v2 (лучшая книжка по Git)
# [ ] https://git-scm.com (графический интерфейс)
# [ ] https://desktop.github.com (полезное приложение)
# [ ] https://github.com/github/gitignore (про игнорирование файлов)
# [ ] https://help.github.com/articles/ignoring-files (про игнорирование файлов)
# [ ] https://help.github.com/articles/set-up-git (настроить Git так, чтобы не вводить пароль при обмене данными с сервером)