// jQuery


// jQuery — кроссбраузерная библиотека JavaScript, упрощающая работу с DOM-элементами
// Большинство операций проводится с помощью функции jQuery или её синонима $.

// Обращаться к элементам лучше всего после загрузки документа (событие ready):
$(document).ready(function() {
  // body...
});

// Селекторы (как в CSS), например
$("tag")
$("#id")
$(".class")
$("div > p")  // непосредственные дочерние элементы
$("div p")    // дочерние элементы
$("div + p")  // следующий непосредственно за...
$("div ~ p")  // следующие за...

// Фильтры (применяются после селекторов)
:first, :last
:even, :odd               // чётные/нечётные элементы
:gt(), :lt(), :eq()       // больше, меньше или равно числу в скобках
:animated                 // в процессе анимации
:focus                    // элемент, который в фокусе в данный момент
:not(selector)            // всё, что не попадает под выборку
$("p[class]")             // содержит атрибут "class"
$("p[id=cat]")            // содержит атрибут "id" со значением "cat"
$("p[id^=cat]")           // содержит атрибут "id" со значением, начинающимся с "cat"
$("p[id^=cat][lang*=en]") // содержит атрибут "id" со значением, начинающимся с "cat", и атрибут "lang", со значением, содержащим "en"
$("p:contains('lorem')")  // содержит в себе строку 'lorem'
$("p:parent")             // родитель элемента
$("div:has(p[class=a])")  // элемент, который содержит элементы, выбранные по запросу "p[class=a]"
$("div p:first-child")    // первый дочерний элемент заданного типа
$("div p:last-of-type")   // последний дочерний элемент заданного типа
$("div p:nth-child(3)")   // третий дочерний элемент заданного типа
$("div p:nth-child(2n)")  // каждый второй дочерний элемент заданного типа

// Выборка (происходит быстрее, чем обычный поиск элементов по селектору) [traversing]
.find("selector")           // поиск элементов внутри выбранного элемента
.first()                    // :first
.last()                     // :last
.next()                     // следующий элемент
.prev()                     // предыдущий элемент
.parent()                   // прямой родитель
.parents("selector")        // родительcкий элемент (может бить и прародителем)
.children("selector")       // прямой потомок
.closest("selector")        // ближайший элемент в DOM-дереве
.filter(".one_more_class")  // фильтрация значений среди выбранных (те, у которых есть ещё и класс "one_more_class")

// Также можно составлять цепочку методов:
.first().parent().next()...

var elem = $("<div>Some text.</div>"); // создание элемента, не принадлежащего документу
// расположить элемент elem
$("#other_elem").before(elem);  // до другого элемента
$("#other_elem").after(elem);   // после другого элемента
$("#other_elem").prepend(elem); // в начале другого элемента
$("#other_elem").append(elem);  // в конце другого элемента
// аналогичные действия:
elem.insertBefore("#other_elem");
elem.insertAfter("#other_elem");
elem.prependTo("#other_elem");
elem.appendTo("#other_elem");


// Захват и изменение данных
.text()              // возвращает текст внутри элемента
.text("New text.")   // задаёт текст внутри элемента
.val()               // получение значения элемента формы
.val("value")        // задание значения элемента формы
.data("key")         // получает значение атрибута data-key элемента
.data("key", "val")  // задаёт значение атрибута data-key элемента
.remove()            // удалить элемент

// Задание стиля
.css("color")         // получить
.css("color", "#fff") // задать
// задать целый объект стиля
.css({
  margin: 10,
  "background-color": "#fff"
})
// для плавного перехода нужно использовать метод
.animate({"left": "10px"}, 500) // вторым параметром (необязательным) задаётся скорость анимации в миллисекундах, либо ключевые слова "fast" (200) или "slow" (600)

// Но лучше прописать изменения в таблице стилей и работать уже с классами
.addClass("name")    // добавить CSS класс
.removeClass("name") // удалить CSS класс
.toggleClass("name") // добавить/удалить CSS класс
.hasClass("name")    // проверка, присвоен ли элементу следующий класс
// для анимаций можно использовать transition

// События
$("selector").on("click", function () {
  // Все события
  // для мышки
  "click"
  "dblclick"
  "focusin"
  "focusout"
  "mousedown"
  "mouseup"
  "mousemove"
  "mouseout"
  "mouseover"
  "mouseleave"
  "mouseenter"
  // для клавиатуры
  "keypress"
  "keydown"
  "keyup"
  // для формы
  "blur"
  "select"
  "change"
  "focus"
  "submit"

  $(this) // конкретно тот элемент из выборки, с которым произошло событие
});
// рассмотрим следующий случай:
$("selector child").on("click", function () {});
// здесь лучше воспользоваться так называемым делегированием события (для тех элементов, которые появляются динамически, через ajax)
$("selector").on("click", "child", function () {});
// если нужно вызвать функцию, то скобки при этом ставить не нужно, так как в противном случае функция вызовется немедленно, а не по событию
$("selector").on("click", myFunc);

// Альтернативная запись событий
.keyup()       // отпускании клавиши клавиатуры


// Отображение элементов
.show()        // показать
.hide()        // скрыть
.toggle()      // скрыть/показать
// свернуть/развернуть
.slideDown()   // показать
.slideUp()     // скрыть
.slideToggle() // скрыть/показать
// выцветание
.fadeIn()      // показать
.fadeOut()     // скрыть
.fadeToggle()  // скрыть/показать
// Для всех этих методов также можно указать в качестве аргумента скорость анимации в миллисекундах


// предотвращает дёргание (перемещение по ссылке)
event.stopPropagation();
event.preventDefault();
// где event — параметр функции события





// загрузка через AJAX
.load("path/to/file.xml");
$.getJSON("data.json", function(data) {
  console.log(data);
});

.search("ABC"); // поиск "АВС" в выбранном тексте


// Источники
// http://jquery.page2page.ru/index.php5/%D0%A1%D0%B5%D0%BB%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D1%8B
// http://try.jquery.com/
// http://api.jquery.com/
// http://api.jquery.com/category/events/