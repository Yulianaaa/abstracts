# Полезное приложение: https://desktop.github.com
# Книжка по git: http://habrahabr.ru/company/enterra/blog/241525/

# Команды
## Документация по командам
git help <command_name>

## Создать контроль версий (создать хранилище ./.git/ в выбранной папке)
git init

## Посмотреть изменения в системе
git status

## Принять изменения в файле
git add <file>

## Принять изменения в текущей папке
git add .

## Удалить файл и принять это изменение
git rm <file>
	--cached <file> # удалить только из отслеживания изменений

## Переместить файл и принять это изменение
git mv <путь_1/к/файлу> <путь_2/к/файлу>

## Закоммитить изменения (сохранить версию) и описать их
git commit -m "Commit message"
	--amend -m "Commit message" # изменить коммит (если есть изменения) с указанным сообщением
	--amend -m "Amended commit message" # изменить сообщение коммита (если нет изменений — проверить соблюдение условия !)
	-a # закоммитить все изменения
### Коммиты желательно писать в настоящем времени
### Придерживаться одних и тех же тегов (кодированию изменений)
### Изменения следует описывать максимально конкретно
### Коммиты могут содержать довольно большое описание. В этом случае важно написать краткое пояснение, а затем более развёрнутое через 1 строчку

## HEAD — указатель на текущий коммит текущей ветки

## Передвинуть указатель назад
git reset
	HEAD <file> # отменить принятое изменение
	--soft <commit_id> # не меняет ни изменения, ни рабочую папку
	--mixed <commit_id> # меняет только изменения, но не рабочую папку
	--hard <commit_id> # меняет всё
## перед использованием этой команды правильно будет скопировать данные о последних 3х коммитах

## Удалить неотслеживаемые изменения
git clean
	-n # проверить, что будет удаляться
	-f # удалить

## Посмотреть историю коммитов
git log
	-n <num> # num коммитов
	--since=2016-09-23 # все коммиты, начиная с указанной даты
	--until=2016-09-23 # все коммиты, до указанной даты
	--author="Igor" # все коммиты указанного автора
	--grep="smth" # поиск по коммитам через регулярное выражение
	HEAD # последний коммит

## Посмотреть изменения в файлах
git diff <file || ничего>
	$1 $2 --stat -- . | wc -l # количество изменений
	--staged # изменения в добавленных (перед коммитом) файлах
	--color-words # показывает изменения прямо в строчке

## Перейти к определённой версии
git checkout
	<file || commit_id || branch> # перейти к версию файла, коммита или ветки
	-- <file> # перейти к последней версии файла, оставаясь на той же ветке
	<commit_id || part_of_the_commit_id> -- <file> # вернуться к определённой версии файла. после этого необходимо сделать следующее:
		git reset HEAD <file>
		git checkout -- <file>

## Вернуться к коммиту
git revert <commit_id || part_of_the_commit_id>

## Запилить последнюю версию проекта на GitHub
git push origin master

## Скрыть изменения с последнего коммита
git stash
## И обратно
git stash pop


# Игнорирование файлов
## https://help.github.com/articles/ignoring-files
## https://github.com/github/gitignore
## Информация об игнорируемых файлах содержится в файле проекта .gitignore
## В нём перечисляются все файлы и папки
## Кроме того, можно задавать регулярные выражения с помощью символов
*, ?, [aeiou], [0-9]
## !этот_файл_не_игнорируется.html
## Строчные комментарии начинаются с символа #
## В проекте следует игнорировать
##   - скомпилированный код
##   - архивы
##   - логи и базы данных
##   - файлы, сгенерированные операционной системой
##   - файлы, загруженные пользователем
## Гобальное игнорирование:
git config --global core.excludesfile ~/.gitignore_global
### По умолчанию, Git игнорирует пустые папки (следит только за файлами). Если же нужно создать пустую папку, то в неё также нужно добавить файл .gitkeep


# Дополнительные фишки
## Настройка автозаполнения в Git
curl -OL http://github.com/git/git/raw/master/contrib/completion/git-completion.bash
mv ~/git-completion.bash ~/.git-completion.bash
### Прописать в .bash_profile
if [ -f ~/.git-completion.bash ]; then
	sourse ~/.git-completion.bash
fi


# Мои команды
## Время создания коммита
git show -s --date=iso-strict-local --pretty=format:'%ad' <commit_id>